package {{packageName}}.infrastructure

{{#moshi}}
import com.squareup.moshi.JsonDataException
import com.squareup.moshi.Moshi
{{/moshi}}
{{#gson}}
import com.google.gson.GsonBuilder
import com.google.gson.JsonParseException
{{/gson}}
import retrofit2.Response

{{#gson}}
import retrofit2.Call
{{/gson}}

{{#moshi}}
@Throws(JsonDataException::class)
inline fun <reified T> Response<*>.getErrorResponse(serializerBuilder: Moshi.Builder = Serializer.moshiBuilder): T? {
    val serializer = serializerBuilder.build()
    val parser = serializer.adapter(T::class.java)
    val response = errorBody()?.string()
    if (response != null) {
        return parser.fromJson(response)
    }
    return null
}
{{/moshi}}
{{#gson}}
@Throws(JsonParseException::class)
inline fun <reified T> Response<*>.getErrorResponse(serializerBuilder: GsonBuilder = Serializer.gsonBuilder): T? {
    val serializer = serializerBuilder.create()
    val reader = errorBody()?.charStream()
    if (reader != null) {
        return serializer.fromJson(reader, T::class.java)
    }
    return null
}
{{/gson}}
{{#gson}}
fun <T> Call<T>.result(): T? {
    try {
        val response = this.execute()
        if (response.isSuccessful && response.body() != null) {
            return response.body()
        } else {
            throw Exception("${response.errorBody()?.string() ?: "Unknown Error"}")
        }
    } catch (error: Exception) {
        throw error
    }
}
{{/gson}}

data class RequestBodyParams(
    val params: List<Any?>?,
    val method: String
)
