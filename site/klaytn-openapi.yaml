openapi: 3.0.2
info:
  title: KLAYTN OPEN API
  version: 1.10.0
  contact:
    name: API support
    url: https://forum.klaytn.foundation/
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: Klay
  - name: Account
  - name: Governance
  - name: Eth
  - name: RewardSpec
    x-displayName: Reward Spec Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/RewardSpec" />
x-tagGroups:
  - name: Klay
    tags:
      - Klay
      - Account
  - name: Models
    tags:
      - RewardSpec
servers:
  - url: http://localhost:7151
  - url: https://api.baobab.klaytn.net:8651
  - url: https://public-en-cypress.klaytn.net
paths:
  /klay/getRewards:
    post:
      tags:
        - Klay
        - Reward
      operationId: getRewards
      summary: '[getRewards] Find distributed block rewards'
      description: |
        Returns distributed block rewards information at the latest block number

        **JSONRPC:** `klay_getRewards`
      parameters:
        - name: blockNumberOrTag
          schema:
            oneOf:
              - type: integer
                format: BN | BigNumber
              - type: string
                enum:
                  - latest
                  - pending
                  - earliest
            readOnly: true
          description: |
            blockNumber is the block number
            blockTag is the string "latest", "earliest" or "pending"
          in: header
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_getRewards
                    params:
                      example:
                        - latest
      responses:
        '200':
          description: |
            block rewards information <br/>
            Link <br/>
            <SchemaDefinition schemaRef="#/components/schemas/RewardSpec" />
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/RewardSpecResult'
        default:
          $ref: '#/components/responses/DefaultErrorResponse'
      x-codeSamples:
        - lang: typescript
          label: Typescript
          source: |
            import {Configuration, KlayApi} from "../../openapi/klay";

            const configuration = new Configuration({
                basePath: 'http://localhost:7151',
            });

            const api = new KlayApi(configuration);

            describe('Klay getRewards API', () => {
                test('should return info of a block number', async () => {
                    const response = await api.getRewards(1);
                    expect(response.data.jsonrpc).toBe("2.0")
                });
            });
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getRewards' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getRewards",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "latest"
              ]
            }'
  /klay/account/accountCreated:
    post:
      operationId: accountCreated
      summary: '[accountCreated] Find if input address was created'
      description: |
        Returns `true` if the account associated with the address is created. It returns `false` otherwise.

        **JSONRPC:** `klay_accountCreated`
      tags:
        - Klay
        - Account
      parameters:
        - name: address
          schema:
            type: string
            format: 20-byte DATA
            readOnly: true
          description: Address
          in: header
        - name: blockNumberOrHash
          schema:
            oneOf:
              - type: integer
                format: BN | BigNumber
              - type: string
                enum:
                  - latest
                  - pending
                  - earliest
                  - genesis
            readOnly: true
          description: |
            Integer or hexadecimal block number, or the string `earliest`, `latest` or `pending` as in the [default block parameter](https://docs.klaytn.foundation/dapp/json-rpc/api-references/klay/block#the-default-block-parameter), or block hash.
          in: header
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_accountCreated
                    params:
                      example:
                        - '0xa4f42d4d2a3a13874406435500950c9bf2d783db'
                        - latest
      responses:
        '200':
          description: The existence of an input address
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: boolean
        default:
          $ref: '#/components/responses/DefaultErrorResponse'
      externalDocs:
        description: |
          **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.*
          Klaytn Docs
        url: https://docs.klaytn.foundation/dapp/json-rpc/api-references/klay/account#klay_accountcreated
      x-codeSamples:
        - lang: typescript
          label: Typescript
          source: |
            import {
                AccountCreatedBlockNumberOrHashParameterOneOf,
                Configuration,
                KlayAccountApi,
            } from "../../../openapi/klay-account";

            const configuration = new Configuration({
                basePath: 'http://localhost:7151',
            });

            const api = new KlayAccountApi(configuration);

            describe('testing index file', () => {
                test('empty string should result in zero', async () => {
                    const receipt = await api.accountCreated(
                        "0xa4f42d4d2a3a13874406435500950c9bf2d783db",
                        AccountCreatedBlockNumberOrHashParameterOneOf.Latest
                    );
                    console.log(receipt.data);
                })
            });
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'http://localhost:7151/klay/accountCreated' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_accountCreated",
              "params": [
                "0xa4f42d4d2a3a13874406435500950c9bf2d783db",
                "latest"
              ]
            }'
components:
  schemas:
    JsonRpcRequest:
      type: object
      required:
        - method
        - id
        - jsonrpc
      properties:
        method:
          type: string
          description: Method name
        id:
          type: integer
          default: 1
          format: int32
          description: Request ID
        jsonrpc:
          type: string
          default: '2.0'
          description: JSON-RPC Version (2.0)
        params:
          type: array
          items: {}
    ParseError:
      type: object
      required:
        - jsonrpc
        - id
        - error
      properties:
        jsonrpc:
          type: string
          default: '2.0'
        id:
          type: integer
          format: int64
        error:
          type: object
          title: ErrorMember
          required:
            - code
          properties:
            message:
              type: string
              default: Parse error
            data:
              type: string
            code:
              type: integer
              format: int32
              default: -32700
              description: invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.
    InvalidRequest:
      title: InvalidRequest
      type: object
      required:
        - jsonrpc
        - id
        - error
      properties:
        jsonrpc:
          type: string
          default: '2.0'
        id:
          type: integer
          format: int64
        error:
          type: object
          title: ErrorMember
          required:
            - code
          properties:
            message:
              type: string
              default: Invalid Request
            data:
              type: string
            code:
              type: integer
              format: int32
              default: -32600
              description: The JSON sent is not a valid Request object.
    MethodNotFound:
      title: MethodNotFound
      type: object
      required:
        - jsonrpc
        - id
        - error
      properties:
        jsonrpc:
          type: string
          default: '2.0'
        id:
          type: integer
          format: int64
        error:
          type: object
          title: ErrorMember
          required:
            - code
          properties:
            message:
              type: string
              default: Method not found
            data:
              type: string
            code:
              type: integer
              format: int32
              default: -32601
              description: The method does not exist / is not available.
    InvalidParams:
      title: InvalidParams
      type: object
      required:
        - jsonrpc
        - id
        - error
      properties:
        jsonrpc:
          type: string
          default: '2.0'
        id:
          type: integer
          format: int64
        error:
          type: object
          title: ErrorMember
          required:
            - code
          properties:
            message:
              type: string
              default: Invalid params
            data:
              type: string
            code:
              type: integer
              format: int32
              default: -32602
              description: Invalid method parameter(s).
    InternalError:
      title: InternalError
      type: object
      required:
        - jsonrpc
        - id
        - error
      properties:
        jsonrpc:
          type: string
          default: '2.0'
        id:
          type: integer
          format: int64
        error:
          type: object
          title: ErrorMember
          required:
            - code
          properties:
            message:
              type: string
              default: Internal error
            data:
              type: string
            code:
              type: integer
              format: int32
              default: -32603
              description: Internal JSON-RPC error.
    ServerError:
      title: ServerError
      type: object
      required:
        - jsonrpc
        - id
        - error
      properties:
        jsonrpc:
          type: string
          default: '2.0'
        id:
          type: integer
          format: int64
        error:
          type: object
          title: ErrorMember
          required:
            - code
          properties:
            message:
              type: string
              default: Server error
            data:
              type: string
            code:
              type: integer
              format: int32
              default: -32000
              description: '-32000 to -32099 </br> Reserved for implementation-defined server-errors.'
    JsonRpcResponse:
      type: object
      required:
        - jsonrpc
        - id
        - result
      properties:
        jsonrpc:
          type: string
          default: '2.0'
        id:
          type: integer
          format: int64
        result: {}
    RewardSpec:
      title: RewardSpec
      description: |
        Haha
        <SchemaDefinition schemaRef="#/components/schemas/RewardSpec" />
      type: object
      required:
        - burnFee
        - kfg
        - kir
        - minted
        - proposer
        - rewords
        - stakers
        - totalFee
      properties:
        burnFee:
          type: integer
          format: int64
          description: the amount burnt
        kgf:
          type: integer
          format: int64
          description: the amount allocated to KGF
        kir:
          type: integer
          format: int64
          description: the amount allocated to KIR
        minted:
          type: integer
          format: int64
          description: the amount newly minted
          example: 9600000000000000000
        proposer:
          type: integer
          format: int64
          description: the amount allocated to the block proposer
          example: 9600000000000000000
        rewords:
          type: object
          description: mapping from reward recipient to amounts
          properties:
            address:
              type: string
          required:
            - address
          additionalProperties:
            type: integer
          example:
            '1.0278187497989767e+48': 9600000000000000000
        stakers:
          type: integer
          format: int64
          description: total amount allocated to stakers
        totalFee:
          type: integer
          format: int64
          description: total tx fee spent
    RewardSpecResult:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/RewardSpec'
  responses:
    DefaultErrorResponse:
      description: Error Response
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/ParseError'
              - $ref: '#/components/schemas/InvalidRequest'
              - $ref: '#/components/schemas/MethodNotFound'
              - $ref: '#/components/schemas/InvalidParams'
              - $ref: '#/components/schemas/InternalError'
              - $ref: '#/components/schemas/ServerError'
